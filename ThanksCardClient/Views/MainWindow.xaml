<Window x:Class="ThanksCardClient.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:ThanksCardClient.Views"
        xmlns:vm="clr-namespace:ThanksCardClient.ViewModels"
        Title="MainWindow" Height="600" Width="800">
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Triggers>
    
    	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

        <!-- MainWindowViewModel からの TransitionMessage("ShowLogon") を受け取とってログオン画面を表示する処理。 -->
        <l:InteractionMessageTrigger MessageKey="ShowLogon" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction/>
        </l:InteractionMessageTrigger>
        <!-- MainWindowViewModel からの TransitionMessage("ShowThanksCardCreate") を受け取とって感謝カード作成画面を表示する処理。 -->
        <!-- InvokeActionOnlyWhenWindowIsActive="False" を指定することで、MainWindow が非表示中であってもメッセージを受け取る-->
        <l:InteractionMessageTrigger MessageKey="ShowThanksCardCreate" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        <!-- MainWindowViewModel からの TransitionMessage("ShowThanksCardList") を受け取とって感謝カード作成画面を表示する処理。 -->
        <l:InteractionMessageTrigger MessageKey="ShowThanksCardList" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        <!-- MainWindowViewModel からの TransitionMessage("ShowUserMst") を受け取とってユーザマスタ画面を表示する処理。 -->
        <l:InteractionMessageTrigger MessageKey="ShowUserMst" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        <!-- MainWindowViewModel からの TransitionMessage("ShowDepartmentMst") を受け取とって部署マスタ画面を表示する処理。 -->
        <l:InteractionMessageTrigger MessageKey="ShowDepartmentMst" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        <!-- MainWindowViewModel からの TransitionMessage("ShowTagMst") を受け取とってタグマスタ画面を表示する処理。 -->
        <l:InteractionMessageTrigger MessageKey="ShowTagMst" Messenger="{Binding Messenger}">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>
    
    <Grid>
        <StackPanel>
            <TextBlock Text="{Binding AuthorizedUser.Name, StringFormat=ログオン中のユーザ: {0} }" HorizontalAlignment="Right"/>
            <Button Content="感謝カードを作成する" Command="{Binding ShowThanksCardCreateCommand}"/>
            <Button Content="感謝カードを一覧表示する" Command="{Binding ShowThanksCardListCommand}"/>
            <Button Content="ユーザのマスタメンテ画面を開く" Command="{Binding ShowUserMstCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
            <Button Content="部署のマスタメンテ画面を開く" Command="{Binding ShowDepartmentMstCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
            <Button Content="タグのマスタメンテ画面を開く" Command="{Binding ShowTagMstCommand}" IsEnabled="{Binding AuthorizedUser.IsAdmin}"/>
        </StackPanel>
    </Grid>
</Window>
